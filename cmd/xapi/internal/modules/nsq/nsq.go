package nsq

import (
	"bytes"
	_ "embed"
	"fmt"
	"go/format"
	"log"
	"os"
	"strings"
	"text/template"

	"app/cmd/xapi/internal/parser"
	"app/cmd/xapi/internal/utils"
)

func Run(scanDir string) {
	doc, err := parser.ParseDir(scanDir)
	if err != nil {
		log.Fatalf("parse dir error: %v", err)
	}
	generateNsq(doc.Nsq)
}

//go:embed nsq.go.tpl
var nsqTpl string

func generateNsq(nsqList []*parser.Nsq) {

	// create template
	tpl := template.Must(template.New("nsq").Funcs(template.FuncMap{
		"cameCase":   utils.CameCase,
		"trimSuffix": strings.TrimSuffix,
	}).Parse(nsqTpl))

	for _, nsq := range nsqList {
		buf := &bytes.Buffer{}
		// do not edit
		buf.WriteString("// Code generated by xnsq. DO NOT EDIT.\n\n")
		err := tpl.Execute(buf, nsq)
		if err != nil {
			log.Fatalf("execute template error: %v", err)
		}
		// format code
		source, err := format.Source(buf.Bytes())
		if err != nil {
			log.Fatalf("format source error: %v", err)
		}

		// write file
		httpFile := strings.TrimSuffix(nsq.FileName, ".go") + ".nsq.go"
		fmt.Printf("write file: %s\n", httpFile)
		err = os.WriteFile(httpFile, source, 0644)
		if err != nil {
			log.Fatalf("write file error: %v", err)
		}
	}
}
