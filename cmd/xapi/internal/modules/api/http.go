package api

import (
	"bytes"
	_ "embed"
	"fmt"
	"go/format"
	"log"
	"os"
	"strings"
	"text/template"

	"app/cmd/xapi/internal/parser"
	"app/cmd/xapi/internal/utils"
)

//go:embed http.go.tpl
var httpTpl string

func generateHttp(doc *parser.Document) {
	// create template
	tpl := template.Must(template.New("http").Funcs(template.FuncMap{
		"method": func(method string) string {
			switch method {
			default:
				return strings.ToUpper(method)
			}
		},
		"cameCase": utils.CameCase,
		"needBindJson": func(serviceName string) bool {
			return len(doc.Schemas[serviceName].Fields) > 0
		},
	}).Parse(httpTpl))

	for _, service := range doc.Services {
		buf := &bytes.Buffer{}
		// do not edit
		buf.WriteString("// Code generated by xapi. DO NOT EDIT.\n\n")
		err := tpl.Execute(buf, service)
		if err != nil {
			log.Fatalf("execute template error: %v", err)
		}

		// format code
		source, err := format.Source(buf.Bytes())
		if err != nil {
			log.Fatalf("format source error: %v", err)
		}

		// write file
		httpFile := strings.TrimSuffix(service.FileName, ".go") + ".http.go"
		fmt.Printf("write file: %s\n", httpFile)
		err = os.WriteFile(httpFile, source, 0644)
		if err != nil {
			log.Fatalf("write file error: %v", err)
		}
	}
}
