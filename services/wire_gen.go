// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"app/api/job"
	component2 "app/component"
	"app/component/counter"
	"app/services/internal/cache"
	"app/services/internal/cmd"
	"app/services/internal/component"
	"app/services/internal/component/email"
	"app/services/internal/component/settting"
	"app/services/internal/component/twofa"
	"app/services/internal/config"
	"app/services/internal/provider"
	"app/services/internal/repo"
	"app/services/internal/router"
	"app/services/internal/service/admin"
	"app/services/internal/service/api"
	job2 "app/services/internal/service/job"
	"app/services/internal/service/job/userlevel"
	"github.com/google/wire"
	"github.com/urfave/cli/v2"
)

// Injectors from wire.go:

func newCommand(conf *config.Config) []*cli.Command {
	captcha := provider.NewCaptcha()
	db := provider.NewDb(conf)
	userRepo := repo.NewUserRepo(db)
	userTokenRepo := repo.NewUserTokenRepo(db)
	client := provider.NewAwsSesClient(conf)
	producer := provider.NewNsqProducer(conf)
	userRegisterPublisher := job.NewUserRegisterPublisher(producer)
	redisClient := provider.NewRedis(conf)
	emailEmail := &email.Email{
		AwsSes: client,
		Redis:  redisClient,
	}
	twoFA := &twofa.TwoFA{}
	userResetPasswordLimiter := &cache.UserResetPasswordLimiter{
		Redis: redisClient,
	}
	counterCounter := &counter.Counter{
		Client: redisClient,
	}
	auth := &api.Auth{
		Captcha:                  captcha,
		UserRepo:                 userRepo,
		UserTokenRepo:            userTokenRepo,
		AwsSes:                   client,
		UserRegisterPublisher:    userRegisterPublisher,
		DB:                       db,
		Config:                   conf,
		Email:                    emailEmail,
		TwoFA:                    twoFA,
		UserResetPasswordLimiter: userResetPasswordLimiter,
		Redis:                    redisClient,
		Counter:                  counterCounter,
	}
	ossClient := provider.NewOssClient(conf)
	uploadComponent := &component.UploadComponent{
		Config: conf,
		Client: ossClient,
	}
	upload := &api.Upload{
		UploadComponent: uploadComponent,
	}
	apiRouter := &router.ApiRouter{
		Config:        conf,
		AuthServer:    auth,
		UserRepo:      userRepo,
		UserTokenRepo: userTokenRepo,
		Upload:        upload,
	}
	apiHttpCmd := cmd.NewApiHttpCmd(apiRouter)
	centerUserRepo := repo.NewCenterUserRepo(db)
	centerRoleRepo := repo.NewCenterRoleRepo(db)
	centerMenuRepo := repo.NewCenterMenuRepo(db)
	centerUserRoleRepo := repo.NewCenterUserRoleRepo(db)
	userAuthComponent := &component.UserAuthComponent{
		CenterUserRepo: centerUserRepo,
	}
	adminAuth := &admin.Auth{
		CenterUserRepo:     centerUserRepo,
		CenterRoleRepo:     centerRoleRepo,
		CenterMenuRepo:     centerMenuRepo,
		CenterUserRoleRepo: centerUserRoleRepo,
		UserAuthComponent:  userAuthComponent,
		DB:                 db,
		CaptchaCode:        captcha,
		Config:             conf,
	}
	centerApiRepo := repo.NewCenterApiRepo(db)
	centerMenuApiRepo := repo.NewCenterMenuApiRepo(db)
	adminPermissionComponent := &component.AdminPermissionComponent{
		CenterApiRepo:      centerApiRepo,
		CenterMenuApiRepo:  centerMenuApiRepo,
		CenterUserRoleRepo: centerUserRoleRepo,
		DB:                 db,
	}
	centerMenu := &admin.CenterMenu{
		CenterAppMenuRepo:    centerMenuRepo,
		CenterAppMenuApiRepo: centerMenuApiRepo,
		DB:                   db,
	}
	centerUser := &admin.CenterUser{
		CenterUserRepo:     centerUserRepo,
		CenterUserRoleRepo: centerUserRoleRepo,
		UserAuthComponent:  userAuthComponent,
		DB:                 db,
	}
	centerRoleMenuRepo := repo.NewCenterRoleMenuRepo(db)
	centerRoleApiRepo := repo.NewCenterRoleApiRepo(db)
	centerRole := &admin.CenterRole{
		CenterRoleRepo:     centerRoleRepo,
		CenterRoleMenuRepo: centerRoleMenuRepo,
		CenterRoleApiRepo:  centerRoleApiRepo,
	}
	centerApi := &admin.CenterApi{
		CenterApiRepo: centerApiRepo,
	}
	adminImageRepo := repo.NewAdminImageRepo(db)
	adminVideoRepo := repo.NewAdminVideoRepo(db)
	adminUpload := &admin.Upload{
		UploadComponent: uploadComponent,
		AdminImageRepo:  adminImageRepo,
		AdminVideoRepo:  adminVideoRepo,
	}
	adminImage := &admin.AdminImage{
		AdminImagesRepo: adminImageRepo,
	}
	user := &admin.User{
		UserRepo: userRepo,
	}
	adminVideo := &admin.AdminVideo{
		AdminVideoRepo: adminVideoRepo,
	}
	settingRepo := repo.NewSettingRepo(db)
	settingSetting := &setting.IntConfig{
		SettingRepo: settingRepo,
	}
	setting2 := &setting.FloatConfig{
		SettingRepo: settingRepo,
	}
	setting3 := &setting.StringConfig{
		SettingRepo: settingRepo,
	}
	setting4 := &setting.FloatListConfig{
		SettingRepo: settingRepo,
	}
	setting5 := &setting.StringListConfig{
		SettingRepo: settingRepo,
	}
	setting6 := &setting.UsdtNetworkListConfig{
		SettingRepo: settingRepo,
	}
	setting7 := &setting.LangTypeConfig{
		SettingRepo: settingRepo,
	}
	setting8 := &setting.CurrencExchangeRateList{
		SettingRepo: settingRepo,
	}
	setting9 := &setting.DepositCurrencyExchangeRateList{
		SettingRepo: settingRepo,
	}
	setting10 := &setting.ConfigFixedTopDiscoveryHomePage{
		SettingRepo: settingRepo,
	}
	setting11 := &setting.Setting{
		IntConfig:                       settingSetting,
		FloatConfig:                     setting2,
		StringConfig:                    setting3,
		FloatListConfig:                 setting4,
		StringListConfig:                setting5,
		UsdtNetworkListConfig:           setting6,
		LangTypeConfig:                  setting7,
		CurrencExchangeRate:             setting8,
		DepositCurrencyExchangeRateList: setting9,
		ConfigFixedTopDiscoveryHomePage: setting10,
	}
	adminSetting := &admin.Setting{
		Setting: setting11,
	}
	adminRouter := &router.AdminRouter{
		Config:                   conf,
		Auth:                     adminAuth,
		UserAuthComponent:        userAuthComponent,
		AdminPermissionComponent: adminPermissionComponent,
		CenterMenu:               centerMenu,
		CenterUser:               centerUser,
		CenterRole:               centerRole,
		CenterAPI:                centerApi,
		Upload:                   adminUpload,
		AdminImage:               adminImage,
		User:                     user,
		AdminVideo:               adminVideo,
		Setting:                  adminSetting,
	}
	adminHttpCmd := cmd.NewAdminHttpCmd(adminRouter)
	userRegister := &userlevel.UserRegister{
		UserRepo: userRepo,
	}
	nsqCmd := cmd.NewNsqCmd(conf, userRegister)
	jobCmd := cmd.NewJobCmd()
	commands := &cmd.Commands{
		ApiHttpCmd:   apiHttpCmd,
		AdminHttpCmd: adminHttpCmd,
		NsqCmd:       nsqCmd,
		JobCmd:       jobCmd,
	}
	v := cmd.NewCliCommands(commands)
	return v
}

// wire.go:

var providerSet = wire.NewSet(cmd.Provider, api.Provider, router.Provider, repo.Provider, provider.Provider, component2.Provider, job2.Provider, job.Provider, component.Provider, admin.Provider, cache.Provider)
