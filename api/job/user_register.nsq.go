// Code generated by xnsq. DO NOT EDIT.

package job

import (
	"app/pkg/broker/nsqx"
	"app/pkg/logger"
	"context"
	"encoding/json"
	"fmt"
	"github.com/nsqio/go-nsq"
	"time"
)

func UserRegisterDefaultConsumer(svc UserRegisterConsumer, addr string, options ...nsqx.Option) {
	err := nsqx.NewConsumer(addr, "travel.user_register", "default", func(ctx context.Context, message []byte) error {
		req := &UserRegisterRequest{}
		if err := json.Unmarshal(message, req); err != nil {
			return fmt.Errorf("unmarshal message error: %w", err)
		}
		return svc.Default(ctx, req)
	}, options...)
	if err != nil {
		panic(fmt.Errorf("create consumer error: %w", err))
	}
}

type UserRegisterPublisher interface {
	Publish(ctx context.Context, msg *UserRegisterRequest) error
	DeferredPublish(ctx context.Context, msg *UserRegisterRequest, delay time.Duration) error
	MultiPublish(ctx context.Context, msg []*UserRegisterRequest) error
}

var _ UserRegisterPublisher = (*UserRegisterPublisherImpl)(nil)

type UserRegisterPublisherImpl struct {
	producer *nsq.Producer
}

func NewUserRegisterPublisher(producer *nsq.Producer) UserRegisterPublisher {
	return &UserRegisterPublisherImpl{
		producer: producer,
	}
}

func (d *UserRegisterPublisherImpl) Publish(ctx context.Context, msg *UserRegisterRequest) error {
	data, err := json.Marshal(&nsqx.Payload[UserRegisterRequest]{
		TraceId: logger.TraceIdFromLogger(ctx),
		Body:    *msg,
	})
	if err != nil {
		return err
	}
	return d.producer.Publish("travel.user_register", data)
}

func (d *UserRegisterPublisherImpl) DeferredPublish(ctx context.Context, msg *UserRegisterRequest, delay time.Duration) error {
	data, err := json.Marshal(&nsqx.Payload[UserRegisterRequest]{
		TraceId: logger.TraceIdFromLogger(ctx),
		Body:    *msg,
	})
	if err != nil {
		return err
	}
	return d.producer.DeferredPublish("travel.user_register", delay, data)
}

func (d *UserRegisterPublisherImpl) MultiPublish(ctx context.Context, msg []*UserRegisterRequest) error {
	data := make([][]byte, 0, len(msg))
	for _, v := range msg {
		b, err := json.Marshal(&nsqx.Payload[UserRegisterRequest]{
			TraceId: logger.TraceIdFromLogger(ctx),
			Body:    *v,
		})
		if err != nil {
			return err
		}
		data = append(data, b)
	}
	return d.producer.MultiPublish("travel.user_register", data)
}
