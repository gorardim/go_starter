// Code generated by xapi. DO NOT EDIT.

package api

import "github.com/gin-gonic/gin"

type authServer struct {
	svc AuthServer
}

func (o *authServer) Login(c *gin.Context) (interface{}, error) {
	req := new(AuthLoginRequest)

	if err := c.ShouldBind(req); err != nil {
		return nil, err
	}

	resp, err := o.svc.Login(c.Request.Context(), req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (o *authServer) Register(c *gin.Context) (interface{}, error) {
	req := new(AuthRegisterRequest)

	if err := c.ShouldBind(req); err != nil {
		return nil, err
	}

	resp, err := o.svc.Register(c.Request.Context(), req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (o *authServer) RegisterSafeQuestion(c *gin.Context) (interface{}, error) {
	req := new(AuthRegisterSafeQuestionRequest)

	resp, err := o.svc.RegisterSafeQuestion(c.Request.Context(), req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (o *authServer) SafeQuestionVerify(c *gin.Context) (interface{}, error) {
	req := new(AuthSafeQuestionVerifyRequest)

	if err := c.ShouldBind(req); err != nil {
		return nil, err
	}

	resp, err := o.svc.SafeQuestionVerify(c.Request.Context(), req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (o *authServer) EmailSend(c *gin.Context) (interface{}, error) {
	req := new(AuthEmailSendRequest)

	if err := c.ShouldBind(req); err != nil {
		return nil, err
	}

	resp, err := o.svc.EmailSend(c.Request.Context(), req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (o *authServer) CaptchaSend(c *gin.Context) (interface{}, error) {
	req := new(AuthCaptchaSendRequest)

	resp, err := o.svc.CaptchaSend(c.Request.Context(), req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (o *authServer) PasswordReset(c *gin.Context) (interface{}, error) {
	req := new(AuthPasswordResetRequest)

	if err := c.ShouldBind(req); err != nil {
		return nil, err
	}

	resp, err := o.svc.PasswordReset(c.Request.Context(), req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (o *authServer) PasswordResetV2(c *gin.Context) (interface{}, error) {
	req := new(AuthPasswordResetRequestV2)

	if err := c.ShouldBind(req); err != nil {
		return nil, err
	}

	resp, err := o.svc.PasswordResetV2(c.Request.Context(), req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (o *authServer) TwoFALogin(c *gin.Context) (interface{}, error) {
	req := new(AuthTwoFALoginRequest)

	if err := c.ShouldBind(req); err != nil {
		return nil, err
	}

	resp, err := o.svc.TwoFALogin(c.Request.Context(), req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (o *authServer) CheckUsername(c *gin.Context) (interface{}, error) {
	req := new(AuthCheckUsernameRequest)

	if err := c.ShouldBind(req); err != nil {
		return nil, err
	}

	resp, err := o.svc.CheckUsername(c.Request.Context(), req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (o *authServer) CheckUsernameV2(c *gin.Context) (interface{}, error) {
	req := new(AuthCheckUsernameRequest)

	if err := c.ShouldBind(req); err != nil {
		return nil, err
	}

	resp, err := o.svc.CheckUsernameV2(c.Request.Context(), req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (o *authServer) CheckInviteCode(c *gin.Context) (interface{}, error) {
	req := new(AuthCheckInviteCodeRequest)

	if err := c.ShouldBind(req); err != nil {
		return nil, err
	}

	resp, err := o.svc.CheckInviteCode(c.Request.Context(), req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func RegisterAuthServer(r *gin.Engine, svc AuthServer, handle func(func(c *gin.Context) (interface{}, error)) gin.HandlerFunc, middlewares ...gin.HandlerFunc) {
	server := &authServer{
		svc: svc,
	}

	r.POST("/api/auth/login", append(middlewares, handle(server.Login))...)
	r.POST("/api/auth/register", append(middlewares, handle(server.Register))...)
	r.POST("/api/auth/register/safe_question", append(middlewares, handle(server.RegisterSafeQuestion))...)
	r.POST("/api/auth/safe_question/verify", append(middlewares, handle(server.SafeQuestionVerify))...)
	r.POST("/api/auth/email/send", append(middlewares, handle(server.EmailSend))...)
	r.POST("/api/auth/captcha/send", append(middlewares, handle(server.CaptchaSend))...)
	r.POST("/api/auth/password/reset", append(middlewares, handle(server.PasswordReset))...)
	r.POST("/api/auth/password/reset/v2", append(middlewares, handle(server.PasswordResetV2))...)
	r.POST("/api/auth/two_fa_login", append(middlewares, handle(server.TwoFALogin))...)
	r.POST("/api/auth/check_username", append(middlewares, handle(server.CheckUsername))...)
	r.POST("/api/auth/check_username/v2", append(middlewares, handle(server.CheckUsernameV2))...)
	r.POST("/api/auth/check_invite_code", append(middlewares, handle(server.CheckInviteCode))...)
}
