// Code generated by xapi. DO NOT EDIT.

package admin

import "github.com/gin-gonic/gin"

type centerUserServer struct {
	svc CenterUserServer
}

func (o *centerUserServer) List(c *gin.Context) (interface{}, error) {
	req := new(CenterUserListRequest)

	if err := c.ShouldBind(req); err != nil {
		return nil, err
	}

	resp, err := o.svc.List(c.Request.Context(), req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (o *centerUserServer) Create(c *gin.Context) (interface{}, error) {
	req := new(CenterUserCreateRequest)

	if err := c.ShouldBind(req); err != nil {
		return nil, err
	}

	resp, err := o.svc.Create(c.Request.Context(), req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (o *centerUserServer) Update(c *gin.Context) (interface{}, error) {
	req := new(CenterUserUpdateRequest)

	if err := c.ShouldBind(req); err != nil {
		return nil, err
	}

	resp, err := o.svc.Update(c.Request.Context(), req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (o *centerUserServer) SwitchStatus(c *gin.Context) (interface{}, error) {
	req := new(CenterUserSwitchStatusRequest)

	if err := c.ShouldBind(req); err != nil {
		return nil, err
	}

	resp, err := o.svc.SwitchStatus(c.Request.Context(), req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (o *centerUserServer) ModifyPassword(c *gin.Context) (interface{}, error) {
	req := new(CenterUserModifyPasswordRequest)

	if err := c.ShouldBind(req); err != nil {
		return nil, err
	}

	resp, err := o.svc.ModifyPassword(c.Request.Context(), req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (o *centerUserServer) RoleList(c *gin.Context) (interface{}, error) {
	req := new(CenterUserRoleListRequest)

	if err := c.ShouldBind(req); err != nil {
		return nil, err
	}

	resp, err := o.svc.RoleList(c.Request.Context(), req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (o *centerUserServer) RoleBind(c *gin.Context) (interface{}, error) {
	req := new(CenterUserRoleBindRequest)

	if err := c.ShouldBind(req); err != nil {
		return nil, err
	}

	resp, err := o.svc.RoleBind(c.Request.Context(), req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (o *centerUserServer) RoleUnbind(c *gin.Context) (interface{}, error) {
	req := new(CenterUserRoleUnbindRequest)

	if err := c.ShouldBind(req); err != nil {
		return nil, err
	}

	resp, err := o.svc.RoleUnbind(c.Request.Context(), req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func RegisterCenterUserServer(r *gin.Engine, svc CenterUserServer, handle func(func(c *gin.Context) (interface{}, error)) gin.HandlerFunc, middlewares ...gin.HandlerFunc) {
	server := &centerUserServer{
		svc: svc,
	}

	r.POST("/admin/center/user/list", append(middlewares, handle(server.List))...)
	r.POST("/admin/center/user/create", append(middlewares, handle(server.Create))...)
	r.POST("/admin/center/user/update", append(middlewares, handle(server.Update))...)
	r.POST("/admin/center/user/switch/status", append(middlewares, handle(server.SwitchStatus))...)
	r.POST("/admin/center/user/modify/password", append(middlewares, handle(server.ModifyPassword))...)
	r.POST("/admin/center/user/role/list", append(middlewares, handle(server.RoleList))...)
	r.POST("/admin/center/user/role/bind", append(middlewares, handle(server.RoleBind))...)
	r.POST("/admin/center/user/role/unbind", append(middlewares, handle(server.RoleUnbind))...)
}
