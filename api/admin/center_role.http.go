// Code generated by xapi. DO NOT EDIT.

package admin

import "github.com/gin-gonic/gin"

type centerRoleServer struct {
	svc CenterRoleServer
}

func (o *centerRoleServer) List(c *gin.Context) (interface{}, error) {
	req := new(CenterRoleListRequest)

	if err := c.ShouldBind(req); err != nil {
		return nil, err
	}

	resp, err := o.svc.List(c.Request.Context(), req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (o *centerRoleServer) All(c *gin.Context) (interface{}, error) {
	req := new(CenterRoleAllRequest)

	resp, err := o.svc.All(c.Request.Context(), req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (o *centerRoleServer) Create(c *gin.Context) (interface{}, error) {
	req := new(CenterRoleCreateRequest)

	if err := c.ShouldBind(req); err != nil {
		return nil, err
	}

	resp, err := o.svc.Create(c.Request.Context(), req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (o *centerRoleServer) Update(c *gin.Context) (interface{}, error) {
	req := new(CenterRoleUpdateRequest)

	if err := c.ShouldBind(req); err != nil {
		return nil, err
	}

	resp, err := o.svc.Update(c.Request.Context(), req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (o *centerRoleServer) SwitchStatus(c *gin.Context) (interface{}, error) {
	req := new(CenterRoleSwitchStatusRequest)

	if err := c.ShouldBind(req); err != nil {
		return nil, err
	}

	resp, err := o.svc.SwitchStatus(c.Request.Context(), req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (o *centerRoleServer) BindMenuList(c *gin.Context) (interface{}, error) {
	req := new(CenterRoleBindMenuListRequest)

	if err := c.ShouldBind(req); err != nil {
		return nil, err
	}

	resp, err := o.svc.BindMenuList(c.Request.Context(), req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (o *centerRoleServer) BindMenuUpdate(c *gin.Context) (interface{}, error) {
	req := new(CenterRoleBindMenuUpdateRequest)

	if err := c.ShouldBind(req); err != nil {
		return nil, err
	}

	resp, err := o.svc.BindMenuUpdate(c.Request.Context(), req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (o *centerRoleServer) BindApiList(c *gin.Context) (interface{}, error) {
	req := new(CenterRoleBindApiListRequest)

	if err := c.ShouldBind(req); err != nil {
		return nil, err
	}

	resp, err := o.svc.BindApiList(c.Request.Context(), req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (o *centerRoleServer) BindApiUpdate(c *gin.Context) (interface{}, error) {
	req := new(CenterRoleBindApiUpdateRequest)

	if err := c.ShouldBind(req); err != nil {
		return nil, err
	}

	resp, err := o.svc.BindApiUpdate(c.Request.Context(), req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func RegisterCenterRoleServer(r *gin.Engine, svc CenterRoleServer, handle func(func(c *gin.Context) (interface{}, error)) gin.HandlerFunc, middlewares ...gin.HandlerFunc) {
	server := &centerRoleServer{
		svc: svc,
	}

	r.POST("/admin/center/role/list", append(middlewares, handle(server.List))...)
	r.POST("/admin/center/role/all", append(middlewares, handle(server.All))...)
	r.POST("/admin/center/role/create", append(middlewares, handle(server.Create))...)
	r.POST("/admin/center/role/update", append(middlewares, handle(server.Update))...)
	r.POST("/admin/center/role/switch/status", append(middlewares, handle(server.SwitchStatus))...)
	r.POST("/admin/center/role/bind/menu/list", append(middlewares, handle(server.BindMenuList))...)
	r.POST("/admin/center/role/bind/menu/update", append(middlewares, handle(server.BindMenuUpdate))...)
	r.POST("/admin/center/role/bind/api/list", append(middlewares, handle(server.BindApiList))...)
	r.POST("/admin/center/role/bind/api/update", append(middlewares, handle(server.BindApiUpdate))...)
}
